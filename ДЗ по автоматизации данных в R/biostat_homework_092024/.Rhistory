wilcox.test(c(Age, Height, Weight, `Systolic blood pressure`, `Diastolic blood pressure`) ~ 1, cleaned_data)
wilcox.test(Age ~ 1, cleaned_data)
wilcox.test(Weight ~ 1, cleaned_data)
wilcox.test(Height ~ 1, cleaned_data)
wilcox.test(`Systolic blood pressure` ~ 1, cleaned_data)
wilcox.test(`Diastolic blood pressure` ~ 1, cleaned_data)
wilcox.test(`Systolic blood pressure` ~ 1, cleaned_data)
wilcox.test(Height ~ 1, cleaned_data)
wilcox.test(Weight ~ 1, cleaned_data)
wilcox.test(Age ~ 1, cleaned_data)
wilcox.test(Height ~ 1, cleaned_data)
wilcox.test(Weight ~ 1, cleaned_data)
wilcox.test(Age ~ 1, cleaned_data)
wilcox.test(`Diastolic blood pressure` ~ 1, cleaned_data)
wilcox.test(1 ~ Age, cleaned_data)
wilcox.test(1 ~ Age, cleaned_data)
wilcox.test(Age ~ Gender, cleaned_data)
wilcox.test(Age, cleaned_data)
wilcox.test(Age$cleaned_data, cleaned_data)
wilcox.test(cleaned_data$Age, cleaned_data)
wilcox.test(cleaned_data$Age)
wilcox.test(cleaned_data$Weight)
wilcox.test(cleaned_data$`Diastolic blood pressure`)
wilcox.test(cleaned_data$Age)
wilcox.test(cleaned_data$Height)
wilcox.test(cleaned_data$`Diastolic blood pressure`)
numeric_vars <- cleaned_data %>%
select(where(is.numeric)) %>%
select(-id)
numeric_vars
shapiro_results <- lapply(numeric_vars, shapiro.test)
shapiro_results <- lapply(numeric_vars, shapiro.test)
numeric_vars
shapiro_results <- lapply(numeric_vars, shapiro.test)
shapiro_results <- lapply(numeric_vars, shapiro.test)
cleaned_data %>%
select(where(is.numeric)) %>%
select(-id)
shapiro_results <- apply(numeric_vars, shapiro.test)
shapiro_results <- apply(numeric_vars, ~ shapiro.test)
shapiro_results <- purr::map(numeric_vars, ~ shapiro.test)
shapiro_results <- map(numeric_vars, ~ shapiro.test)
library(purr)
library(purr)
library(purrr)
shapiro_results <- map(numeric_vars, ~ shapiro.test)
shapiro_results
shapiro_results
str(shapiro_results)
library(purrr)
numeric_vars <- cleaned_data %>%
select(where(is.numeric)) %>%
select(-id)
shapiro_results <- map(numeric_vars, ~ shapiro.test)
str(shapiro_results)
library(purrr)
numeric_vars <- cleaned_data %>%
select(where(is.numeric)) %>%
select(-id)
shapiro_results <- map(numeric_vars, ~ shapiro.test(.x) %>% broom::tidy())
library(purrr)
shapiro_results <- map(numeric_vars, ~ shapiro.test(.x) %>% broom::tidy())
shapiro_results <- map(numeric_vars, ~ shapiro.test(.x))
library(purrr)
numeric_vars <- cleaned_data %>%
select(where(is.numeric)) %>%
select(-id)
shapiro_results <- map(numeric_vars, ~ shapiro.test(.x) %>% broom::tidy())
numeric_vars
cleaned_data %>%
select(where(is.numeric)) %>%
select(-id) %>%
slice(1:5000)
library(purrr)
numeric_vars <- cleaned_data %>%
select(where(is.numeric)) %>%
select(-id) %>%
slice(1:5000)
shapiro_results <- map(numeric_vars, ~ shapiro.test(.x) %>% broom::tidy())
shapiro_df <- bind_rows(shapiro_results, .id = "Variable")
shapiro_df
numeric_vars <- cleaned_data %>%
select(where(is.numeric)) %>%
select(-id)
plot_qq <- function(data, var) {
ggplot(data, aes(sample = .data[[var]])) +
stat_qq() +
stat_qq_line() +
ggtitle(paste("QQ-plot for", var)) +
theme_minimal()
}
# Применяем функцию к каждой переменной
qq_plots <- map(names(numeric_vars), ~ plot_qq(numeric_vars, .x))
qq_plots
#Классический тест, который применяется, когда группы имеют нормальное распределние и дисперсии групп равны.
# Критерий Хи-квадрат
chisq_test_gender <- chisq.test(cleaned_data$gender, cleaned_data$`Presence or absence of cardiovascular disease`)
#Классический тест, который применяется, когда группы имеют нормальное распределние и дисперсии групп равны.
# Критерий Хи-квадрат
chisq_test_gender <- chisq.test(cleaned_data$Gender, cleaned_data$`Presence or absence of cardiovascular disease`)
print(chisq_test_gender)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(flextable)
library(stringr)
data <- read.csv2("data\\raw\\cardio_train_big.csv")
data <- read.csv2("data\\raw\\cardio_train_big.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(flextable)
library(stringr)
data <- read.csv2("data\\raw\\cardio_train_big.csv")
cw()
cw
data <- read.csv2("data\\raw\\cardio_train_big.csv")
data <- read.csv2("data/raw/cardio_train_big.csv")
data <- read.csv2("cardio_train_big.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(flextable)
library(stringr)
data <- read.csv2("data\\raw\\cardio_train_big.csv")
data %>% glimpse()
data %>% summary()
data
# Приводим данные в порядок, исправляем тип, переводим факторные переменные из строчных, переименовываем факторы, атрибуты, отфильтровываем аномалии
cleaned_data <- data %>%
mutate(gender = if_else(gender==1, "Male", "Female")) %>%
mutate(across(c(gender, cholesterol, gluc, smoke, active, cardio), ~ as.factor(.x))) %>%
mutate(weight = as.numeric(weight)) %>% mutate(weight = round(weight,0)) %>%
mutate(across(c(cholesterol, gluc), ~ factor(.x, levels = c(1,2,3), labels = c("normal", "above normal", "well above normal")))) %>%
mutate(across(c(smoke, alco, active, cardio), ~ factor(.x, levels = c(0,1), labels = c("yes", "no")))) %>%
mutate(age = age/365) %>% mutate(age = round(age,0)) %>%
mutate(ap_hi = if_else(ap_hi < 0 & between(abs(ap_hi), 50, 250), abs(ap_hi), ap_hi)) %>%
mutate(ap_lo = if_else(ap_lo < 0 & between(abs(ap_lo), 20, 140), abs(ap_lo), ap_lo)) %>%
filter(height >= 100, weight >= 20, ap_hi >= 90 & ap_hi <= 150, ap_lo >= 20 & ap_lo <= 140) %>%
rename(`Age` = `age`,
`Height` = `height`,
`Weight` = `weight`,
`Gender` = `gender`,
`Systolic blood pressure` = `ap_hi`,
`Diastolic blood pressure` = `ap_lo`,
`Cholesterol` = `cholesterol`,
`Glucose` = `gluc`,
`Smoking` = `smoke`,
`Alcohol intake` = `alco`,
`Physical activity` = `active`,
`Presence or absence of cardiovascular disease` = `cardio`)
data <- read.csv("data\\raw\\cardio_train_big.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(flextable)
library(stringr)
library(RColorBrewer)
library(ggbeeswarm)
library(purrr)
library(corrplot)
library(corrplot)
library(psych)
cleaned_data %>%
nrow()
cleaned_data
cleaned_data %>%
slice(nrow(.) * 0.7)
cleaned_data %>%
slice(nrow(.))
cleaned_data %>%
slice(100)
cleaned_data %>%
slice(1:100)
cleaned_data %>%
slice(1:(nrow(.)*0.7))
train_data <- cleaned_data %>%
slice(1:(nrow(.)*0.7))
model <- glm(`Presence or absence of cardiovascular disease` ~ Age + Gender + Height + Weight + `Systolic blood pressure` + `Diastolic blood pressure` + Cholesterol + Gluc + Smoke + `Alcohol intake` + `Physical activity`,
data = train_data, family = "binomial")
model <- glm(`Presence or absence of cardiovascular disease` ~ Age + Gender + Height + Weight + `Systolic blood pressure` + `Diastolic blood pressure` + Cholesterol + Glucose + Smoke + `Alcohol intake` + `Physical activity`,
data = train_data, family = "binomial")
cleaned_data
model <- glm(`Presence or absence of cardiovascular disease` ~ Age + Gender + Height + Weight + `Systolic blood pressure` + `Diastolic blood pressure` + Cholesterol + Glucose + Smoking + `Alcohol intake` + `Physical activity`,
data = train_data, family = "binomial")
summary(model)
cleaned_data %>%
slice(1:(nrow(.)*0.7))
cleaned_data %>%
slice((nrow(train_data)+1):nrow(cleaned_data))
cleaned_data %>%
slice(1:(nrow(.)*0.7))
cleaned_data %>%
slice((nrow(train_data)+1):nrow(cleaned_data))
cleaned_data
cleaned_data %>%
slice((nrow(train_data)+1):nrow(cleaned_data))
cleaned_data %>%
slice(1:(nrow(.)*0.7))
cleaned_data %>%
slice(1:(nrow(.)*0.7))
cleaned_data %>%
slice((nrow(train_data)+1):nrow(cleaned_data))
cleaned_data %>%
slice((nrow(.)*0.7+1):nrow(.))
cleaned_data %>%
slice(((nrow(.)*0.7)+1):nrow(.))
train_data <- cleaned_data %>%
slice(1:(nrow(.)*0.7))
cleaned_data %>%
slice(nrow(train_data):nrow(.))
train_index <- createDataPartition(cleaned_data$cardio, p = 0.7, list = FALSE)
# Отбираем 70% данных на обучающую часть и 30% на валидацию
train_index <- createDataPartition(cleaned_data, p = 0.7, list = FALSE)
library(caret)
install.packages("caret")
library(caret)
train_index <- createDataPartition(cleaned_data, p = 0.7, list = FALSE)
library(caret)
createDataPartition(cleaned_data, p = 0.7, list = FALSE)
train_index <- createDataPartition(cleaned_data$`Presence or absence of cardiovascular disease`, p = 0.7, list = FALSE)
train_data <- cleaned_data[train_index, ]
test_data <- cleaned_data[-train_index, ]
train_index
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(flextable)
library(stringr)
library(RColorBrewer)
library(ggbeeswarm)
library(purrr)
library(corrplot)
library(corrplot)
library(psych)
# Отбираем 70% данных на обучающую часть и 30% на валидацию
end <- cleaned_data(1:nrow(.))
# Отбираем 70% данных на обучающую часть и 30% на валидацию
end <- nrow(cleaned_data)
end
nrow(cleaned_data)
end <- nrow(cleaned_data) * 0.7
end
# Отбираем 70% данных на обучающую часть и 30% на валидацию
end <- (nrow(cleaned_data) * 0.7 %>% round(0)
end
# Отбираем 70% данных на обучающую часть и 30% на валидацию
end <- nrow(cleaned_data) * 0.7 %>% round(0)
end
nrow(cleaned_data)
(nrow(cleaned_data) * 0.7)
(nrow(cleaned_data) * 0.7) %>% round(0)
# Отбираем 70% данных на обучающую часть и 30% на валидацию
end <- (nrow(cleaned_data) * 0.7) %>% round(0)
end
train_data <- cleaned_data %>% slice(1:end)
train_data
end1 <- end+1
end1
test_data <- cleaned_data %>% slice(end1:nrow(.))
slice(end1:nrow(.))
cleaned_data %>% slice(end1:nrow(.))
cleaned_data %>% slice(end:end1)
cleaned_data %>% slice(1:end)
train_data[end]
train_data[[end]]
train_data %>% tail()
model <- glm(`Presence or absence of cardiovascular disease` ~ Age + Gender + Height + Weight + `Systolic blood pressure` + `Diastolic blood pressure` + Cholesterol + Glucose + Smoking + `Alcohol intake` + `Physical activity`,
data = train_data, family = "binomial")
summary(model)
rmse <- sqrt(mean((predictions - test_data$`Presence or absence of cardiovascular disease`)^2))
# Оценка модели
predictions <- predict(model, newdata = test_data)
predictions
rmse <- sqrt(mean((predictions - test_data$`Presence or absence of cardiovascular disease`)^2))
mae <- mean(abs(predictions - test_data$`Presence or absence of cardiovascular disease`))
r_squared <- summary(model)$r.squared
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
cat("R-squared:", r_squared, "\n")
rmse <- sqrt(mean((predictions - test_data$`Presence or absence of cardiovascular disease`)^2))
rmse
mae <- mean(abs(predictions - test_data$`Presence or absence of cardiovascular disease`))
mae
r_squared
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
cat("R-squared:", r_squared, "\n")
r_squared <- summary(model)$r.squared
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
cat("R-squared:", r_squared, "\n")
# Отбираем 70% данных на обучающую часть и 30% на валидацию
end <- (nrow(cleaned_data) * 0.7) %>% round(0)
end1 <- end+1
train_data <- cleaned_data %>% slice(1:end)
test_data <- cleaned_data %>% slice(end1:nrow(.))
# Построение линейной регресии
model <- glm(`Presence or absence of cardiovascular disease` ~ Age + Gender + Height + Weight + `Systolic blood pressure` + `Diastolic blood pressure` + Cholesterol + Glucose + Smoking + `Alcohol intake` + `Physical activity`,
data = train_data, family = "binomial")
summary(model)
# Оценка модели
predictions <- predict(model, newdata = test_data)
# Расчет метрик
rmse <- sqrt(mean((predictions - test_data$`Presence or absence of cardiovascular disease`)^2))
mae <- mean(abs(predictions - test_data$`Presence or absence of cardiovascular disease`))
r_squared <- summary(model)$r.squared
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
cat("R-squared:", r_squared, "\n")
model <- glm(`Presence or absence of cardiovascular disease` ~ Age + Gender + Height + Weight + `Systolic blood pressure` + `Diastolic blood pressure` + Cholesterol + Glucose + Smoking + `Alcohol intake` + `Physical activity`,
data = train_data, family = "binomial")
summary(model)
test_data$`Presence or absence of cardiovascular disease`
predictions
test_data$`Presence or absence of cardiovascular disease`
model <- glm(`Presence or absence of cardiovascular disease` ~ Age + Gender + Height + Weight + `Systolic blood pressure` + `Diastolic blood pressure` + Cholesterol + Glucose + Smoking + `Alcohol intake` + `Physical activity`,
data = train_data, family = "binomial")
summary(model)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(flextable)
library(stringr)
library(RColorBrewer)
library(ggbeeswarm)
library(purrr)
library(corrplot)
library(corrplot)
library(psych)
data <- read.csv2("data\\raw\\cardio_train_big.csv")
data %>% glimpse()
data %>% summary()
data
# Приводим данные в порядок, исправляем тип, переводим факторные переменные из строчных, переименовываем факторы, атрибуты, отфильтровываем аномалии
cleaned_data <- data %>%
mutate(gender = if_else(gender==1, "Male", "Female")) %>%
mutate(across(c(gender, cholesterol, gluc, smoke, active, cardio), ~ as.factor(.x))) %>%
mutate(weight = as.numeric(weight)) %>% mutate(weight = round(weight,0)) %>%
mutate(across(c(cholesterol, gluc), ~ factor(.x, levels = c(1,2,3), labels = c("normal", "above normal", "well above normal")))) %>%
mutate(across(c(smoke, alco, active, cardio), ~ factor(.x, levels = c(0,1), labels = c("yes", "no")))) %>%
mutate(age = age/365) %>% mutate(age = round(age,0)) %>%
mutate(ap_hi = if_else(ap_hi < 0 & between(abs(ap_hi), 50, 250), abs(ap_hi), ap_hi)) %>%
mutate(ap_lo = if_else(ap_lo < 0 & between(abs(ap_lo), 20, 140), abs(ap_lo), ap_lo)) %>%
filter(height >= 100, weight >= 20, ap_hi >= 90 & ap_hi <= 150, ap_lo >= 20 & ap_lo <= 140) %>%
rename(`Age` = `age`,
`Height` = `height`,
`Weight` = `weight`,
`Gender` = `gender`,
`Systolic blood pressure` = `ap_hi`,
`Diastolic blood pressure` = `ap_lo`,
`Cholesterol` = `cholesterol`,
`Glucose` = `gluc`,
`Smoking` = `smoke`,
`Alcohol intake` = `alco`,
`Physical activity` = `active`,
`Presence or absence of cardiovascular disease` = `cardio`)
# Сортировка по возрасту
cleaned_data %>%
arrange(desc(Age))
# Outliers problem case
find_outliers <- function(column) {
mean_val <- mean(column, na.rm = TRUE)
sd_val <- sd(column, na.rm = TRUE)
lower_bound <- mean_val - 3 * sd_val
upper_bound <- mean_val + 3 * sd_val
outliers <- column < lower_bound | column > upper_bound
return(outliers)
}
numeric_columns <- c("Age", "Height", "Weight", "Systolic blood pressure", "Diastolic blood pressure")
outliers <- cleaned_data %>%
mutate(across(all_of(numeric_columns), ~ find_outliers(.), .names = "outlier_{col}")) %>%
select(id, contains("outlier_"))
outliers <- outliers %>%
filter(if_any(starts_with("outlier_"), ~ . == TRUE))
write_csv(outliers, "outliers.csv")
#Переменные (атрибуты)
ncol(cleaned_data)
#Кортежи/строки/записи
nrow(cleaned_data)
cleaned_data %>% filter(duplicated(.) == TRUE)
# В "очищенных" данных
missing_value <- colSums(is.na(cleaned_data))
#missing_values_filtered <- missing_values[missing_values > 0]
# В исходном датасете
missing_value <- colSums(is.na(data))
#missing_values_filtered <- missing_values[data > 0]
# Тут стоит отметить, что если посмотреть иходный датасет, то там нулей нет, но есть 0 там, где это нереально, например, в диастолическом давлении (ap_lo), что можно рассматривать как пропущенное значение
data %>%
filter(ap_lo == 0)
# Можно также привести данные, которые были отфильтрованы в чанке выше.
senseless <- data %>%
filter(height < 100 | weight < 20 | ap_hi < 90 | ap_hi > 150 | ap_lo < 20 | ap_lo > 140)
quantitative_vars <- c("Age", "Height", "Weight", "Systolic blood pressure", "Diastolic blood pressure")
summary_stats <- cleaned_data %>%
group_by(`Presence or absence of cardiovascular disease`) %>%
summarize(across(all_of(quantitative_vars),
list(
n = ~ sum(!is.na(.)),
missing = ~ sum(is.na(.)),
mean = ~ mean(., na.rm = TRUE),
median = ~ median(., na.rm = TRUE),
sd = ~ sd(., na.rm = TRUE),
q25 = ~ quantile(., 0.25, na.rm = TRUE),
q75 = ~ quantile(., 0.75, na.rm = TRUE),
iqr = ~ IQR(., na.rm = TRUE),
min = ~ min(., na.rm = TRUE),
max = ~ max(., na.rm = TRUE),
ci_low = ~ mean(., na.rm = TRUE) - 1.96 * sd(., na.rm = TRUE) / sqrt(sum(!is.na(.))),
ci_high = ~ mean(., na.rm = TRUE) + 1.96 * sd(., na.rm = TRUE) / sqrt(sum(!is.na(.)))
),
.names = "{.col}_{.fn}")) %>%
pivot_longer(cols = !`Presence or absence of cardiovascular disease`, names_to = "Statistics", values_to = "Values") %>%
rowwise() %>%
flextable() %>%
theme_box() %>%
merge_v( "Presence or absence of cardiovascular disease")
confidence_interval <- function(p, n) {
z <- qnorm(0.975)
se <- sqrt((p * (1 - p)) / n)
lower <- p - z * se
upper <- p + z * se
return(c(lower, upper))
}
calculate_statistics <- function(data, var) {
absolute_counts <- table(data[["Presence or absence of cardiovascular disease"]], data[[var]])
relative_counts <- prop.table(absolute_counts, margin = 1)
ci_results <- apply(relative_counts, 2, function(x) {
sapply(seq_along(x), function(i) confidence_interval(x[i], rowSums(absolute_counts)[i]))
})
list(
absolute_counts = absolute_counts,
relative_counts = relative_counts,
ci_results = ci_results
)
}
factor_vars <- names(cleaned_data)[sapply(cleaned_data, is.factor)]
results <- list()
for (var in factor_vars) {
results[[var]] <- calculate_statistics(cleaned_data, var)
}
results
palette <- brewer.pal(5, "Paired")
cleaned_data %>%
select(where(is.numeric), `Presence or absence of cardiovascular disease`) %>%
select(!id) %>%
pivot_longer(cols = c(Age, Height, Weight, `Systolic blood pressure`, `Diastolic blood pressure`), names_to = "Names", values_to = "Values") %>%
mutate(Names = factor(Names, levels = c("Age", "Height", "Weight", "Systolic blood pressure", "Diastolic blood pressure"))) %>%
ggplot(aes(x = Names, y = Values, fill =`Presence or absence of cardiovascular disease`))+
geom_boxplot(outlier.shape = NA)+
scale_fill_manual(values = palette) +
scale_color_manual(values = palette) +
#geom_beeswarm(aes(x = Names, y = Values, fill =`Presence or absence of cardiovascular disease`), size = 0.5, cex = 0.5, dodge.width = 0.7, alpha = 0.6) +
#scale_fill_brewer(palette = "Set2") +
facet_wrap(~ Names, scales = "free", nrow = 1)
#Визуализация с помощью баплота зависимости между полом и наличием/отсутствием сердечных заболеваний
cleaned_data %>%
ggplot(aes(x=Gender, y = `Presence or absence of cardiovascular disease`))+
geom_col()
# Диаграмма отражающая долю людей с наличием сердечно-сосудистых заболеваний среди лиц с высоким давлением с распредлением по полу
cleaned_data %>%
filter(`Systolic blood pressure` > 140 & `Diastolic blood pressure` > 90) %>%
group_by(`Presence or absence of cardiovascular disease`) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(total = sum(count),
proportion = count / total) %>%
ggplot(aes(x = "", y = proportion, fill = `Presence or absence of cardiovascular disease`)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y")
numeric_vars <- cleaned_data %>%
select(where(is.numeric)) %>%
select(-id) %>%
slice(1:5000)
shapiro_results <- map(numeric_vars, ~ shapiro.test(.x) %>% broom::tidy())
shapiro_df <- bind_rows(shapiro_results, .id = "Variable")
shapiro_df
numeric_vars <- cleaned_data %>%
select(where(is.numeric)) %>%
select(-id)
plot_qq <- function(data, var) {
ggplot(data, aes(sample = .data[[var]])) +
stat_qq() +
stat_qq_line() +
ggtitle(paste("QQ-plot for", var)) +
theme_minimal()
}
qq_plots <- map(names(numeric_vars), ~ plot_qq(numeric_vars, .x))
# Критерий Стьюдента - количественная
t.test(Age ~ `Presence or absence of cardiovascular disease`, data = cleaned_data)
print(t_test_age)
# Критерий Стьюдента - количественная
t.test(Age ~ `Presence or absence of cardiovascular disease`, data = cleaned_data)
#Классический тест, который применяется, когда группы имеют нормальное распределние и дисперсии групп равны.
# Критерий Хи-квадрат
chisq.test(cleaned_data$Gender, cleaned_data$`Presence or absence of cardiovascular disease`)
# Используется для сравнения двух категориальных переменных
correlation <- cleaned_data %>%
select(is.numeric & !id) %>%
cor(use = "complete.obs")
corrplot(correlation, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.8)
cor_test_matrix <- corr.test(correlation, adjust = "holm")
corrplot(cor_test_matrix$r, method = "color", type = "upper", order = "hclust", tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.8)
# Отбираем 70% данных на обучающую часть и 30% на валидацию
end <- (nrow(cleaned_data) * 0.7) %>% round(0)
end1 <- end+1
train_data <- cleaned_data %>% slice(1:end)
test_data <- cleaned_data %>% slice(end1:nrow(.))
# Построение линейной регресии
model <- glm(`Presence or absence of cardiovascular disease` ~ Age + Gender + Height + Weight + `Systolic blood pressure` + `Diastolic blood pressure` + Cholesterol + Glucose + Smoking + `Alcohol intake` + `Physical activity`,
data = train_data, family = "binomial")
summary(model)
